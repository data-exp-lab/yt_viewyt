"""This module contains all the sub widgets needed to implement various
acquisition object widgets for plot generators and data object generators.

"""


from PyQt4 import QtGui
from yt.units import dimensions
from yt.units.unit_lookup_table import default_unit_symbol_lut as ulut, \
    prefixable_units, \
    unit_prefixes
from acquisition_objects import YtDataObject
from yt.data_objects.static_output import FieldNameContainer as Container


class NameW(QtGui.QWidget):
    r"""A widget for naming things.

    This widget provides a label and a line to input text. The intent is to use
    this text to then name an object or plot.

    Parameters
    ----------
    start_text : string or unicode
        The text to initially be displayed in the widget text box,
        alternatively, the default name of objects generated by the widget."""

    def __init__(self, start_text):
        super(NameW, self).__init__()

        label = QtGui.QLabel('Object Name:')

        self.name_w = QtGui.QLineEdit()
        self.name_w.setText(start_text)

        layout = QtGui.QHBoxLayout()
        layout.addWidget(label)
        layout.addWidget(self.name_w)

        self.setLayout(layout)

    def get_name(self):
        r"""A function to get the text from the instance of the name widget.

        Returns
        -------
        string
            The current text in the name widget, interpreted to be the name of
            the object you are dealing with. """
        return self.name_w.text()


class FieldParametersW(QtGui.QWidget):
    r"""A widget for getting a dictionary of field parameters that can be
    accessed by derived fields."""

    def __init__(self):
        super(FieldParametersW, self).__init__()
        self.field_parameters_label = QtGui.QLabel('Field Parameters')
        self.field_parameters = QtGui.QComboBox()
        self.field_parameters.addItem('None')

        field_parameters_layout = QtGui.QHBoxLayout()
        field_parameters_layout.addWidget(self.field_parameters_label)
        field_parameters_layout.addWidget(self.field_parameters)

        self.setLayout(field_parameters_layout)

    def get_field_parameters(self):
        r"""A function for getting the field parameters.

        Returns
        -------
        string
            The current contents of the instance of field parameters combo box.

        Notes
        -----
        This widget needs to be reworked so that it returns a dictionary."""

        return self.field_parameters.currentText()


class DataSourceW(QtGui.QWidget):
    r"""A widget used to specify the source of data for a plot or derived data
    object.

    This widget utilizes the information passed by ``parent`` to get all none
    frontend type data objects in the application and allows the user to select
    an entry in the list to use as the source of data in the object they are
    creating.

    Parameters
    ----------
    parent : AcquisitionActiveW
        The highest level widget from which this widget is spawned. The parent
        contains all the data needed for construction.
        """

    def __init__(self, parent):
        super(DataSourceW, self).__init__()
        self.parent = parent

        self.data_sourcel = QtGui.QLabel('data_source')
        self.data_source = QtGui.QComboBox()
        self.data_source.addItem('None')

        data_source_layout = QtGui.QHBoxLayout()
        data_source_layout.addWidget(self.data_sourcel)
        data_source_layout.addWidget(self.data_source)

        self.setLayout(data_source_layout)

        # this object's parent is an AcquisitionActiveW
        self.data_source.addItems([x.name for x in
                                  self.parent.data_objects if type(x) ==
                                   YtDataObject])

    def get_data_source(self):
        r"""Returns the data the user has specified to use as the data source.

        Returns
        -------
        yt-data-object
            The data specified by the user."""
        name = self.data_source.currentText()
        out = [x for x in self.parent.data_objects if x.name == name]
        if len(out) == 1:
            out = out[0].data
        else:
            out = None
        return out


class CartAxisW(QtGui.QWidget):
    r"""A widget for selecting one of the three cartesian axes.

    This widget is primarily employed in the generation of on axis plots, and
    provides the user with a means to specify one of the key pieces of
    information in these plot types.

    Parameters
    ----------
    label : string or unicode
        The label to be put beside the selection box for this instance of
        widget."""

    def __init__(self, label):
        super(CartAxisW, self).__init__()
        label = QtGui.QLabel(label)

        self.options = QtGui.QComboBox()
        self.options.addItems(['x', 'y', 'z'])

        layout = QtGui.QHBoxLayout()
        layout.addWidget(label)
        layout.addWidget(self.options)

        self.setLayout(layout)

    def get_axis(self):
        r"""Returns the currently selected axis from the widget instance."""
        return self.options.currentText()


class CoordinateUnitsW(QtGui.QWidget):
    r"""A widget for specifying the units to be used for any coordinate
    specification.

    This widget utilizes the units module in yt to let users specify units
    for axes, locations, etc."""

    def __init__(self):
        super(CoordinateUnitsW, self).__init__()

        self.label = QtGui.QLabel("Coordinate Units:")
        self.unit_list = QtGui.QComboBox()
        self.unit_list.addItems([x for x in ulut.keys() if
                                 ulut[x][1] == dimensions.length])
        self.unit_list.addItem('Code Length')
        self.unit_list.currentIndexChanged.connect(self.check_prefix)

        self.prefix_widget = QtGui.QComboBox()
        self.prefix_widget.addItems(list(unit_prefixes.keys()))
        self.prefix_widget.addItem('None')
        self.prefix_widget.setHidden(True)

        self.layout = QtGui.QHBoxLayout()
        self.layout.addWidget(self.label)
        self.layout.addWidget(self.prefix_widget)
        self.layout.addWidget(self.unit_list)
        self.setLayout(self.layout)

    def check_prefix(self, index):
        r"""This function checks if the currently selected unit can have a
        prefix in front of it. If the unit can have a prefix, an additional
        widget is displayed.

        Parameters
        ----------
        index : int
            This argument is provided by the Qt application during execution.
            It provides the index of the unit the user has selected."""
        unit = self.unit_list.itemText(index)
        if unit in prefixable_units:
            self.prefix_widget.setHidden(False)
        else:
            self.prefix_widget.setHidden(True)

    def get_unit(self):
        r"""Returns the unit selected by the user.

        Returns
        -------
        out : string or None
            This is the unit the user has selected. If the user has chosen
            code units, None is returned."""
        if self.prefix_widget.isHidden():
            out = self.unit_list.currentText()
            if out == 'Code Length':
                out = None
        else:
            unit = self.unit_list.currentText()
            prefix = self.prefix_widget.currentText()
            if prefix != 'None':
                out = prefix + unit
            else:
                out = unit
        return out


class CoordinateW(QtGui.QWidget):
    r"""A widget for selecting the value of an unspecified coordinate. This
    widget also supports float inputs from the user.

    Parameters
    ----------
    coord : string or unicode
        A string that labels the numerical input box of this widget. In
        implementation this is typically a single character such as x, y,
        or z."""

    def __init__(self, coord):
        super(CoordinateW, self).__init__()
        self.label = QtGui.QLabel(coord)
        self.value = QtGui.QDoubleSpinBox()
        self.value.setMaximum(1000)
        layout = QtGui.QHBoxLayout()
        layout.addWidget(self.label)
        layout.addWidget(self.value)
        self.setLayout(layout)

    def get_coordinate(self):
        r"""Returns the number input by the user.

        Returns
        -------
        double
            The value input by the user."""
        return self.value.value()

    def set_label(self, new_coord):
        r"""Changes the label of the widget instance. Useful when conditions
        allow for different axes depending on the situation.

        Parameters
        ----------
        new_coord : string or unicode
            The new label for the widget instance."""
        self.label.setText(new_coord)
        self.show()


class CartCoordinateComboW(QtGui.QWidget):
    r"""A widget for simultaneously specifying three different values, one for
    each cartesian coordinate. """

    def __init__(self):
        super(CartCoordinateComboW, self).__init__()
        self.coord1 = CoordinateW('x')
        self.coord2 = CoordinateW('y')
        self.coord3 = CoordinateW('z')

        layout = QtGui.QHBoxLayout()
        layout.addWidget(self.coord1)
        layout.addWidget(self.coord2)
        layout.addWidget(self.coord3)

        self.setLayout(layout)

    def get_coordinates(self):
        r"""Gets the coordinates specified by the user.

        Returns
        -------
        list
            A list of doubles corresponding to the coordinates (x,y,z)"""
        return [self.coord1.get_coordinate(),
                self.coord2.get_coordinate(),
                self.coord3.get_coordinate()]


class Var2CoordinateComboW(QtGui.QWidget):
    r"""A convenience widget for simultaneously creating two coordinate widgets
    whose labels can change according to the situation.

    Parameters
    ----------
    label1 : string or unicode
        The label for the first coordinate widget.
    label2 : string or unicode
        The label for the second coordinate widget."""

    def __init__(self, label1, label2):
        super(Var2CoordinateComboW, self).__init__()
        self.coordinate1 = CoordinateW(label1)
        self.coordinate2 = CoordinateW(label2)

        layout = QtGui.QHBoxLayout()

        layout.addWidget(self.coordinate1)
        layout.addWidget(self.coordinate2)

        self.setLayout(layout)

    def get_coordinates(self):
        r"""Gets the coordinates specified by the user.

        Returns
        -------
        list
            A list containing the values specified in each coordinate widget.
        """
        return [self.coordinate1.get_coordinate(),
                self.coordinate2.get_coordinate()]


class WidthW(QtGui.QWidget):
    r"""A widget for specifying the width of a plot type. Its displayed
    contents change depending on whether users want a square or rectangular
    plot."""

    def __init__(self):
        super(WidthW, self).__init__()

        opt1 = QtGui.QCheckBox('Square Plot')
        opt2 = QtGui.QCheckBox('Rectangle Plot')

        opt1.setChecked(True)

        self.buttons = QtGui.QButtonGroup()
        self.buttons.addButton(opt1)
        self.buttons.addButton(opt2)

        buttonw = QtGui.QGroupBox("Plot Shape:")
        buttonw_layout = QtGui.QHBoxLayout()
        buttonw_layout.addWidget(opt1)
        buttonw_layout.addWidget(opt2)

        buttonw.setLayout(buttonw_layout)

        self.units = CoordinateUnitsW()
        self.units.label.setText('Units of Plot Region Dimension:')

        self.width = Var2CoordinateComboW('Plot Region Side Length:',
                                          'Plot Region Height:')
        self.width.coordinate2.setHidden(True)

        self.buttons.buttonClicked.connect(self.set_plot_params)

        layout = QtGui.QVBoxLayout()
        layout.addWidget(buttonw)
        layout.addWidget(self.units)
        layout.addWidget(self.width)
        self.setLayout(layout)

    def set_plot_params(self):
        r"""This function sets the displayed contents based on whether or not
        a square plot type has been selected by the user."""
        case = self.buttons.checkedButton().text()[0]

        if case == 'S':
            self.units.label.setText('Units of Plot Region Dimension:')
            self.width.coordinate2.setHidden(True)
        else:
            self.units.label.setText("Units of Plot Region Dimensions:")
            self.width.coordinate1.setLabel('Plot Region Width:')
            self.width.coordinate2.setHidden(False)

    def get_width(self):
        r"""Returns the width specified by the user, in a format compatible
        with yt plot input argument.

        Returns
        -------
        tuple or double
            Depending on the units specified and if a square or rectangular
            plot is desired, this output will be the length of each side in
            user selected units."""
        case = self.buttons.checkedButton().text()[0]

        if case == 'S':
            coord = self.width.coordinate1.get_coordinate()
            unit = self.units.get_unit()
            if unit is not None:
                return (coord, unit)
            else:
                return coord
        else:
            coord = self.width.get_coordinates
            unit = self.units.get_unit()
            if unit is not None:
                return ((coord[0], unit), (coord[1], unit))
            else:
                return (coord[0], coord[1])


class FieldSelectorW(QtGui.QWidget):
    r"""A widget for selecting a single field.

    This widget takes an object and label and then reads through the list of
    available fields for the object and displays them in a modular way for
    users to select.

    Parameters
    ----------
    data_object : YtObject
        The object from which the fields will be read.
    a_label : string or unicode
        The label for the instance of field selector widget."""

    def __init__(self, data_object, a_label):
        super(FieldSelectorW, self).__init__()
        label = QtGui.QLabel(a_label)

        if hasattr(data_object.data, 'ds'):
            source = data_object.data.ds
        else:
            source = data_object.data

        self.field_dict = {}
        self.field_dict = self.recursive_dict('fields', source,
                                              self.field_dict)

        self.top_selector = QtGui.QComboBox()
        self.top_selector.addItems(self.field_dict['fields'])
        self.top_selector.currentIndexChanged.connect(
            self.set_selector2)

        self.selector2 = QtGui.QComboBox()
        self.selector2.addItems(self.field_dict[
            self.top_selector.currentText()])
        self.selector2.setEditable(True)

        layout = QtGui.QHBoxLayout()
        layout.addWidget(label)
        layout.addWidget(self.top_selector)
        layout.addWidget(self.selector2)

        self.setLayout(layout)

    def recursive_dict(self, name, source, field_dict):
        r"""This function recursively reads through the field list of a yt
        object's data to construct a nested dictionary of options for
        specifying a field

        Parameters
        ----------
        name : string or unicode
            The name of the first entry in the nested dictionary that will be
            returned.
        source : YtDataContainer
            The source of the nested tuple of fields users can select from.
        field_dict : dict
            The dictionary that will store all the data gained from executing
            this function.

        Returns
        -------
        field_dict : dict
            A nested dictionary of fields that users can chose in the widget.
        """
        field_dict[name] = []
        for x in dir(getattr(source, name)):
            field_dict[name].append(x)
            if type(getattr(getattr(source, name), x)) == Container:
                field_dict = self.recursive_dict(x, getattr(source, name),
                                                 field_dict)
        return field_dict

    def set_selector2(self, index):
        r"""Depending on the contents of ``top_selector``, this function sets
        what will be displayed in the second field selector.

        Parameters
        ----------
        index : int
            The current index of ``top_selector``, not used in any computation.
        """
        ref = self.top_selector.currentText()
        self.selector2.clear()
        self.selector2.addItems(self.field_dict[ref])

    def get_field(self):
        r"""Returns the field selected by the user.

        Returns
        -------
        tuple
            A tuple of strings specifying fields for a given yt object."""
        return (self.top_selector.currentText(), self.selector2.currentText())


class VarFieldSelectorsW(QtGui.QWidget):
    r"""A widget that will display a variable number of field selectors.

    Parameters
    ----------
    data_object : YtObject
        The object from which the list of selectable fields will be
        constructed.
    num : int
        The number of field selector widgets to initially construct and
        display."""

    def __init__(self, data_object, num):
        super(VarFieldSelectorsW, self).__init__()
        self.source = data_object
        self.widget_list = []

        self.layout = QtGui.QVBoxLayout()

        self.set_field_selectors(num)

        for x in self.widget_list:
            self.layout.addWidget(x)

        self.setLayout(self.layout)

    def set_field_selectors(self, num):
        r"""Sets ``num`` field selectors to be in the widget and displayed.

        Parameters
        ----------
        num : int
            The number of field selector widgets to construct and display"""
        if len(self.widget_list) < num:
            while len(self.widget_list) < num:
                i = len(self.widget_list)
                label = "Field %s:" % (i + 1)
                self.widget_list.append(FieldSelectorW(self.source, label))
                self.layout.addWidget(self.widget_list[-1])
        else:
            while len(self.widget_list) > num:
                trash = self.widget_list.pop()
                self.layout.removeWidget(trash)
                del trash

    def get_fields(self):
        r"""Return the field selected by the user in each of the displayed
        field selectors.

        Returns
        -------
        fields : list
            A list of tuples specifying fields from each selector widget."""
        fields = []
        for x in self.widget_list:
            fields.append(x.get_field())
        return fields


class MasterFieldSelectionW(QtGui.QWidget):
    r"""A widget that lets the user specify how many field selector widgets
    she/he wants for the given situation, and then displays those field
    selector widgets.

    Parameters
    ----------
    data_object : YtObject
        The object from which the list of selectable fields will be
        constructed."""
    def __init__(self, data_object):
        super(MasterFieldSelectionW, self).__init__()

        self.source = data_object

        num_label = QtGui.QLabel('Number of Fields to Plot:')

        self.num_selector = QtGui.QSpinBox()
        self.num_selector.setMinimum(1)
        self.num_selector.setValue(1)

        num_w = QtGui.QWidget()
        num_w_layout = QtGui.QHBoxLayout()
        num_w_layout.addWidget(num_label)
        num_w_layout.addWidget(self.num_selector)
        num_w.setLayout(num_w_layout)

        self.field_list = VarFieldSelectorsW(self.source, 1)

        self.num_selector.valueChanged.connect(
            self.field_list.set_field_selectors)

        layout = QtGui.QVBoxLayout()
        layout.addWidget(num_w)
        layout.addWidget(self.field_list)

        self.setLayout(layout)

    def get_fields(self):
        r"""Returns the fields selected by the user.

        Returns
        -------
        list
            A list of tuples corresponding to the fields selected by the user.
        """
        return self.field_list.get_fields()
